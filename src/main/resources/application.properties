#端口
server.port=8091
spring.application.name=springboot_mybatis

# 配置不同环境
spring.profiles.active=dev


###################  mybatis-plus配置  ###################
mybatis-plus.mapper-locations= classpath*:mapper/*.xml
mybatis-plus.typeAliasesPackage= www.sh.com.domain
#0:数据库ID自增   1:用户输入id  2:全局唯一id(IdWorker)  3:全局唯一ID(uuid)
mybatis-plus.global-config.id-type= 2
mybatis-plus.global-config.db-column-underline= false
mybatis-plus.global-config.refresh-mapper= true
mybatis-plus.configuration.map-underscore-to-camel-case= true

#逻辑删除配置
mybatis-plus.global-config.logic-delete-value= 1
mybatis-plus.global-config.logic-not-delete-value= 0
mybatis-plus.global-config.sql-injector= com.baomidou.mybatisplus.mapper.LogicSqlInjector

#配置的缓存的全局开关
mybatis-plus.configuration.cache-enabled= true
#延时加载的开关
mybatis-plus.configuration.lazyLoadingEnabled= true
#开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性
mybatis-plus.configuration.multipleResultSetsEnabled= true


###################  druid 连接池配置  ###################
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.druid.datasource.initialSize=10
spring.druid.datasource.minIdle=2
spring.druid.datasource.maxActive=100
# 配置获取连接等待超时的时间
spring.druid.datasource.maxWait=1000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.druid.datasource.timeBetweenEvictionRunsMillis=1000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.druid.datasource.minEvictableIdleTimeMillis=30000
spring.druid.datasource.maxEvictableIdleTimeMillis=60000
spring.druid.datasource.validationQuery=SELECT 1
spring.druid.datasource.testWhileIdle=true
spring.druid.datasource.testOnBorrow=false
spring.druid.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.druid.datasource.poolPreparedStatements=true
spring.druid.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.druid.datasource.filters=stat,wall,log4j,config
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.druid.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.druid.datasource.useGlobalDataSourceStat=true

#druid recycle
spring.druid.datasource.removeAbandoned=false
spring.druid.datasource.removeAbandonedTimeout=300
spring.druid.datasource.logAbandoned=false
